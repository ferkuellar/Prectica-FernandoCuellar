---
format: html
editor: visual
---

```{r}
library(ggplot2)
library(dplyr)
library(readr)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
```

Mostrar las primeras 6 filas del dataframe

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
#newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
#"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")

# Nuevo vector de nombres para las columnas
newnames <- c("CodigoPostal", "Barrio", "TipoPropiedad", "TipoAlquiler", "MaxOcupantes", 
              "NumBanyos", "NumDormitorios", "NumCamas", "TipoCama", "Comodidades", 
              "PiesCuadrados", "Precio", "Puntuacion")

if (length(newnames) == length(names(airbnb))) {
  names(airbnb) <- newnames
} else {
  stop("El número de nombres nuevos no coincide con el número de columnas en el dataframe.")
}

names(airbnb)

```

1.  Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
# Crear columna MetrosCuadrados

airbnb$MetrosCuadrados <- airbnb$PiesCuadrados * 0.092903

head(airbnb)

```

------------------------------------------------------------------------

2.  Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dnetro de 28002

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}
# Asegurarse de que CodigoPostal sea de tipo string
airbnb$CodigoPostal <- as.character(airbnb$CodigoPostal)

# Reemplazar valores vacíos y '-' por NA
airbnb$CodigoPostal[airbnb$CodigoPostal %in% c('', '-')] <- NA
```

```{r}
head(airbnb)
```

```{r}
# Reemplaza valores que no empiezan por 28 por NA
airbnb$CodigoPostal[!grepl('^28', airbnb$CodigoPostal)] <- NA
```

```{r}
head(airbnb)
```

```{r}
# Ver de que CodigoPostal sea de tipo string
airbnb$CodigoPostal <- as.character(airbnb$CodigoPostal)

# Reemplazar con NA los códigos postales que no comienzan con '28'
airbnb$CodigoPostal <- ifelse(substr(airbnb$CodigoPostal, 1, 2) != '28', NA, airbnb$CodigoPostal)

# Obtener y mostrar todos los valores únicos de CodigoPostal
codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)

```

```{r}

# Asegurarse de que CodigoPostal sea de tipo string
airbnb$CodigoPostal <- as.character(airbnb$CodigoPostal)

# Dividir los códigos postales en '\n' y seleccionar la primera parte
airbnb$CodigoPostal <- sapply(strsplit(airbnb$CodigoPostal, "\n"), `[`, 1)

# Se verifican los valores únicos después de la corrección
unique_codigos_postales <- unique(airbnb$CodigoPostal)
print(unique_codigos_postales)

```

```{r}
# Se corrige el código postal de '2804' a '28004'
airbnb$CodigoPostal <- gsub("^2804$", "28004", airbnb$CodigoPostal)

# Se corriger el código postal de '2805' a '28005'
airbnb$CodigoPostal <- gsub("^2805$", "28005", airbnb$CodigoPostal)

# se corrige el código postal de '2815' a '28015'
airbnb$CodigoPostal <- gsub("^2815$", "28015", airbnb$CodigoPostal)

```

------------------------------------------------------------------------

3.  Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}
# Verificar los valores únicos después de las correcciones
unique_codigos_postales <- unique(airbnb$CodigoPostal)
print(unique_codigos_postales)
```

------------------------------------------------------------------------

4.  ¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}

# Asegúrate de que la columna CodigoPostal sea de tipo string
airbnb$CodigoPostal <- as.character(airbnb$CodigoPostal)

# Contar las entradas para cada código postal
conteo_codigos_postales <- table(airbnb$CodigoPostal)

# Ordenar los conteos de mayor a menor y seleccionar los 5 con más entradas
codigos_postales_mas_entradas <- sort(conteo_codigos_postales, decreasing = TRUE)[1:5]

# Ordenar los conteos de menor a mayor y seleccionar los 5 con menos entradas
# Excluir los códigos postales con NA o conteos de 0
codigos_postales_menos_entradas <- sort(conteo_codigos_postales[conteo_codigos_postales > 0], decreasing = FALSE)[1:5]


```

```{r}

# Mostrar los resultados
cat("Los 5 códigos postales con más entradas son:\n")
print(codigos_postales_mas_entradas)

```

```{r}

cat("\nLos 5 códigos postales con menos entradas son:\n")
print(codigos_postales_menos_entradas)

```

```{r}

cat("\nConteo de entradas para cada código postal:\n")
print(conteo_codigos_postales)

```

------------------------------------------------------------------------

5.  ¿Cuales son los barrios que hay en el código postal 28012?

```{r}

# Filtrar el DataFrame para el código postal 28012
datos_28012 <- subset(airbnb, CodigoPostal == '28012')

# Obtener los barrios únicos en el código postal 28012
barrios_28012 <- unique(datos_28012$Barrio)

# Mostrar los barrios
print("Los barrios en el código postal 28012 son:")
print(barrios_28012)

```

------------------------------------------------------------------------

6.  ¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}

# Filtrar el DataFrame para el código postal 28012
datos_28012 <- subset(airbnb, CodigoPostal == '28012')

# Agrupar por barrio y contar las entradas en cada uno
conteo_barrios_28012 <- table(datos_28012$Barrio)

# Mostrar el número de entradas por barrio para el código postal 28012
print("Número de entradas por barrio para el código postal 28012:")
print(conteo_barrios_28012)

```

------------------------------------------------------------------------

7.  ¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}

# Asegúrate de que la columna Barrio sea de tipo string
airbnb$Barrio <- as.character(airbnb$Barrio)

# Obtener los barrios únicos en todo el dataset
barrios_unicos <- unique(airbnb$Barrio)

# Contar cuántos barrios únicos hay
numero_barrios <- length(barrios_unicos)

# Mostrar el número de barrios y los barrios
print(paste("Número de barrios únicos en el dataset:", numero_barrios))
print("Barrios únicos en el dataset:")
print(barrios_unicos)


```

------------------------------------------------------------------------

8.  ¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}

# Asegúrate de que la columna Barrio sea de tipo string
airbnb$Barrio <- as.character(airbnb$Barrio)

# Contar las entradas en cada barrio y ordenar
conteo_barrios <- airbnb %>%
  group_by(Barrio) %>%
  summarise(NumeroEntradas = n()) %>%
  arrange(desc(NumeroEntradas)) %>%
  head(5)

# Crear una gráfica de barras para los 5 barrios con más entradas
ggplot(conteo_barrios, aes(x = reorder(Barrio, NumeroEntradas), y = NumeroEntradas)) +
  geom_bar(stat = "identity", fill = "blue") +
  theme_minimal() +
  labs(title = "Top 5 Barrios con Mayor Número de Entradas en Airbnb",
       x = "Barrio",
       y = "Número de Entradas") +
  coord_flip() # Girar la gráfica para una mejor visualización



```

------------------------------------------------------------------------

9.  ¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

```{r}

# Asegúrate de que la columna TipoAlquiler sea de tipo string
airbnb$TipoAlquiler <- as.character(airbnb$TipoAlquiler)

# Contar y listar los tipos de alquiler diferentes
tipos_alquiler_unicos <- unique(airbnb$TipoAlquiler)
numero_tipos_alquiler <- length(tipos_alquiler_unicos)

# Contar las entradas en el dataframe para cada tipo de alquiler
conteo_tipos_alquiler <- table(airbnb$TipoAlquiler)

# Mostrar la información
print(paste("Número de tipos de alquiler diferentes:", numero_tipos_alquiler))
print("Tipos de alquiler únicos:")
print(tipos_alquiler_unicos)
print("Número de entradas por tipo de alquiler:")
print(conteo_tipos_alquiler)
```

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}

# Excluir filas con valores no finitos en la columna Precio
airbnb_limpio <- subset(airbnb, !is.na(Precio) & Precio != Inf & Precio != -Inf)

# Crear un diagrama de cajas del precio para cada tipo de alquiler con datos limpios
ggplot(airbnb_limpio, aes(x = TipoAlquiler, y = Precio)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Diagrama de Cajas del Precio para Cada Tipo de Alquiler",
       x = "Tipo de Alquiler",
       y = "Precio")

```

------------------------------------------------------------------------

10. Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

Si la diferencia en el precio medio de alquiler entre los diferentes tipos de alquiler es estadísticamente significativa, podemos realizar un test ANOVA o Kruskal-Wallis. El test a utilizar depende de la distribución de los datos. Si los datos cumplen con los supuestos de ANOVA (normalidad y homogeneidad de varianzas), se puede utilizar ANOVA. Si los datos no cumplen con los supuestos de ANOVA, se puede utilizar Kruskal-Wallis.

```{r}
# Asegúrate de que las columnas estén en el formato correcto
airbnb$TipoAlquiler <- as.character(airbnb$TipoAlquiler)
airbnb$Precio <- as.numeric(airbnb$Precio)

# Calcular el precio medio de alquiler para cada tipo
precios_medios <- airbnb %>%
  group_by(TipoAlquiler) %>%
  summarise(PrecioMedio = mean(Precio, na.rm = TRUE))

print("Precio medio de alquiler por tipo:")
print(precios_medios)

# Realizar un test ANOVA o Kruskal-Wallis para comparar las medias
# El test a utilizar depende de la distribución de los datos
# Ejemplo con ANOVA:
resultados_anova <- aov(Precio ~ TipoAlquiler, data = airbnb)
print(summary(resultados_anova))

# Si los datos no cumplen con los supuestos de ANOVA, usar Kruskal-Wallis
# resultados_kruskal <- kruskal.test(Precio ~ TipoAlquiler, data = airbnb)
# print(resultados_kruskal)

```

------------------------------------------------------------------------

11. Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
# Filtrar el DataFrame para entradas donde el tipo de alquiler es 'Entire home/apt'
airbnb_entire <- subset(airbnb, TipoAlquiler == 'Entire home/apt')

# Mostrar las primeras filas del nuevo DataFrame
head(airbnb_entire)
```

------------------------------------------------------------------------

12. ¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}

# Asegúrate de que la columna Barrio sea de tipo string
airbnb_entire$Barrio <- as.character(airbnb_entire$Barrio)

# Contar las entradas en cada barrio
conteo_barrios <- table(airbnb_entire$Barrio)

# Ordenar los conteos de mayor a menor y seleccionar los 5 barrios con más entradas
top_5_barrios <- sort(conteo_barrios, decreasing = TRUE)[1:5]

# Mostrar los resultados
print("Los 5 barrios con mayor número de apartamentos enteros en alquiler son:")
print(top_5_barrios)

```

------------------------------------------------------------------------

13. ¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}

# Asegúrate de que las columnas estén en el formato correcto
airbnb_entire$Barrio <- as.character(airbnb_entire$Barrio)
airbnb_entire$Precio <- as.numeric(airbnb_entire$Precio)
```

```{r}
# Usar aggregate para calcular el precio medio por barrio
precio_medio_por_barrio <- aggregate(Precio ~ Barrio, airbnb_entire, mean, na.rm = TRUE)
```

```{r}
top_5_barrios_precio_medio <- head(precio_medio_por_barrio[order(precio_medio_por_barrio$Precio, decreasing = TRUE), ], 5)
```

```{r}
print("Los 5 barrios con el mayor precio medio de alquiler para apartamentos enteros son:")
print(top_5_barrios_precio_medio)
```

------------------------------------------------------------------------

14. ¿Cuantos apartamentos hay en cada uno de esos barrios?

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
# Contar las entradas (apartamentos) en cada uno de los 5 barrios superiores
conteo_apartamentos_top5 <- airbnb_entire %>%
  filter(Barrio %in% top_5_barrios_precio_medio$Barrio) %>%
  group_by(Barrio) %>%
  summarise(Freq = n())

# Mostrar el conteo de apartamentos
print("Número de apartamentos en los 5 barrios con mayor precio medio:")
print(conteo_apartamentos_top5)
```

```{r}
# Fusionar el conteo de apartamentos con el precio medio por barrio
informacion_detallada <- merge(top_5_barrios_precio_medio, conteo_apartamentos_top5, by = "Barrio")

# Mostrar el DataFrame final
print("Información detallada de los 5 barrios con mayor precio medio:")
print(informacion_detallada)
```

------------------------------------------------------------------------

15. Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}
# Contar las entradas en cada barrio
conteo_barrios <- airbnb_entire %>%
  group_by(Barrio) %>%
  summarise(NumeroEntradas = n())

# Filtrar los barrios con más de 100 entradas
barrios_mas_100_entradas <- conteo_barrios[conteo_barrios$NumeroEntradas > 100, ]
```

```{r}
# Calcular el precio medio de alquiler para cada barrio
precio_medio_por_barrio <- aggregate(Precio ~ Barrio, airbnb_entire, mean, na.rm = TRUE)

# Fusionar con los barrios que tienen más de 100 entradas
barrios_filtrados <- merge(barrios_mas_100_entradas, precio_medio_por_barrio, by = "Barrio")

# Ordenar por precio medio y seleccionar los 5 primeros
top_5_barrios_precio_mas_100_entradas <- head(barrios_filtrados[order(barrios_filtrados$Precio, decreasing = TRUE), ], 5)

# Mostrar los resultados
print("Los 5 barrios con mayor precio medio y más de 100 entradas son:")
print(top_5_barrios_precio_mas_100_entradas)
```

------------------------------------------------------------------------

16. Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}
library(ggplot2)
# Asegúrate de que las columnas estén en el formato correcto
airbnb_entire$Barrio <- as.character(airbnb_entire$Barrio)
airbnb_entire$Precio <- as.numeric(airbnb_entire$Precio)

# Filtrar el DataFrame para excluir valores no finitos en la columna Precio
datos_filtrados <- subset(airbnb_entire, !is.na(Precio) & Precio != Inf & Precio != -Inf & Barrio %in% top_5_barrios)


# Crear un diagrama de densidad para cada barrio con datos filtrados
ggplot(datos_filtrados, aes(x = Precio, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ Barrio, scales = "free") +
  theme_minimal() +
  labs(title = "Distribución de los Precios por Barrio",
       x = "Precio",
       y = "Densidad") +
  theme(legend.position = "bottom")

```

------------------------------------------------------------------------

17. Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}

# Asegúrate de que las columnas estén en el formato correcto
airbnb_entire$Barrio <- as.character(airbnb_entire$Barrio)
airbnb_entire$MetrosCuadrados <- as.numeric(airbnb_entire$MetrosCuadrados)

# Filtrar el DataFrame para incluir solo los 5 barrios seleccionados
top_5_barrios <- top_5_barrios_precio_mas_100_entradas$Barrio
datos_top_5_barrios <- subset(airbnb_entire, Barrio %in% top_5_barrios)

# Calcular el tamaño medio en metros cuadrados para cada barrio
tamano_medio_por_barrio <- aggregate(MetrosCuadrados ~ Barrio, datos_top_5_barrios, mean, na.rm = TRUE)
```

```{r}
# Fusionar el tamaño medio con el DataFrame de precio medio y número de entradas
informacion_completa <- merge(top_5_barrios_precio_mas_100_entradas, tamano_medio_por_barrio, by = "Barrio")

# Mostrar el DataFrame final
print("Información completa de los 5 barrios con mayor precio medio:")
print(informacion_completa)
```

------------------------------------------------------------------------

18. Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}
# Asegúrate de que las columnas estén en el formato correcto
airbnb_entire$Barrio <- as.character(airbnb_entire$Barrio)
airbnb_entire$MetrosCuadrados <- as.numeric(airbnb_entire$MetrosCuadrados)

# Filtrar el DataFrame para excluir valores no finitos en la columna de tamaño
datos_filtrados <- subset(datos_top_5_barrios, !is.na(MetrosCuadrados) & MetrosCuadrados != Inf & MetrosCuadrados != -Inf)

# Crear un diagrama de densidad para cada barrio con datos filtrados
ggplot(datos_filtrados, aes(x = MetrosCuadrados, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ Barrio, scales = "free") +
  theme_minimal() +
  labs(title = "Distribución del Tamaño de los Apartamentos por Barrio",
       x = "Tamaño (Metros Cuadrados)",
       y = "Densidad") +
  theme(legend.position = "bottom")

```

------------------------------------------------------------------------

19. Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero

¿son estadísticamente diferentes?

Los resultados de las pruebas estadísticas que has realizado proporcionan información valiosa sobre las diferencias en el tamaño de los apartamentos entre los cinco barrios seleccionados. Aquí está un análisis detallado de estos resultados:

Pruebas de Shapiro-Wilk para Normalidad:

Los resultados muestran que los tamaños de los apartamentos en la mayoría de los barrios seleccionados no siguen una distribución normal, excepto en el barrio "Goya" (p = 0.5199 \> 0.05, indicando normalidad). En "Sol", "Justicia", "Recoletos" y "Trafalgar", los valores p son significativamente bajos, sugiriendo que los datos no se distribuyen normalmente. Prueba de Levene para Homogeneidad de Varianzas:

El test de Levene no muestra diferencias significativas en las varianzas entre los grupos (p = 0.2673 \> 0.05), lo que sugiere que las varianzas son homogéneas. Test ANOVA:

A pesar de la homogeneidad de varianzas, el valor p del ANOVA (p = 0.637 \> 0.05) indica que no hay diferencias estadísticamente significativas en las medias de los tamaños de los apartamentos entre los cinco barrios. Test de Kruskal-Wallis:

Dado que los datos no siguen una distribución normal en la mayoría de los barrios, el test de Kruskal-Wallis es más apropiado. El test de Kruskal-Wallis también indica que no hay diferencias estadísticamente significativas en las medias de los tamaños de los apartamentos entre los cinco barrios (p = 0.7574 \> 0.05). Conclusiones: La falta de normalidad en los tamaños de los apartamentos en la mayoría de los barrios sugiere la necesidad de utilizar métodos no paramétricos como el test de Kruskal-Wallis. Tanto el ANOVA como el test de Kruskal-Wallis concluyen que no hay diferencias significativas en las medias de los tamaños de los apartamentos entre los cinco barrios seleccionados. Esto implica que, aunque los barrios pueden tener características distintas que afectan el precio medio, el tamaño de los apartamentos no varía significativamente entre estos barrios desde un punto de vista estadístico. Estos resultados son importantes para entender cómo el tamaño de los apartamentos contribuye a la dinámica del mercado inmobiliario en estos barrios y pueden informar decisiones relacionadas con inversiones inmobiliarias o estrategias de precios.

¿Que test habría que usar para comprobarlo?

Consideraciones para Elegir el Test Adecuado Normalidad de los Datos:

Si los datos son normalmente distribuidos en cada grupo, se pueden considerar pruebas paramétricas como el ANOVA (Análisis de Varianza). Si los datos no siguen una distribución normal, deberíamos optar por pruebas no paramétricas como el test de Kruskal-Wallis. Homogeneidad de las Varianzas:

Si las varianzas son homogéneas (iguales entre los grupos), el ANOVA es adecuado. Si las varianzas no son homogéneas, incluso con datos normalmente distribuidos, se puede considerar el uso de Welch's ANOVA o métodos no paramétricos.

Pasos para el Análisis Prueba de Normalidad:

Se puede realizar una prueba de Shapiro-Wilk o una prueba de normalidad gráfica (por ejemplo, QQ plots) para cada grupo. Prueba de Homogeneidad de Varianzas:

Utilizar la prueba de Levene o Bartlett para evaluar si las varianzas son homogéneas. Ejecutar el Test Adecuado:

Si los datos pasan las pruebas de normalidad y homogeneidad de varianzas, ejecutar un ANOVA. Si no, optar por Kruskal-Wallis o Welch's ANOVA.

```{r}

# Pruebas de normalidad para cada barrio
library(ggplot2)
for (barrio in unique(datos_top_5_barrios$Barrio)) {
    shapiro_test <- shapiro.test(datos_top_5_barrios$MetrosCuadrados[datos_top_5_barrios$Barrio == barrio])
    print(paste("Prueba de Shapiro-Wilk para", barrio, ":", shapiro_test$p.value))
}

# Prueba de homogeneidad de varianzas
levene_test <- car::leveneTest(MetrosCuadrados ~ Barrio, data = datos_top_5_barrios)
print(levene_test)

# Test ANOVA o Kruskal-Wallis dependiendo de los resultados anteriores
anova_result <- aov(MetrosCuadrados ~ Barrio, data = datos_top_5_barrios)
kruskal_result <- kruskal.test(MetrosCuadrados ~ Barrio, data = datos_top_5_barrios)

# Imprimir resultados
print(summary(anova_result))
print(kruskal_result)


```

------------------------------------------------------------------------

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

20. Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

```{r}

# Filtrar los datos para el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Asegúrate de que las columnas estén en el formato correcto
barrio_sol$NumBanyos <- as.numeric(barrio_sol$NumBanyos)
barrio_sol$NumDormitorios <- as.numeric(barrio_sol$NumDormitorios)
barrio_sol$MaxOcupantes <- as.numeric(barrio_sol$MaxOcupantes)
barrio_sol$MetrosCuadrados <- as.numeric(barrio_sol$MetrosCuadrados)

# Calcular la matriz de correlación para las variables seleccionadas
matriz_correlacion <- cor(barrio_sol[,c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")], use = "complete.obs")

# Mostrar la matriz de correlación
print("Matriz de correlación entre las variables seleccionadas:")
print(matriz_correlacion)
```

------------------------------------------------------------------------

21. Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
# Limpiar los datos: eliminar filas con valores NA o atípicos
barrio_sol <- subset(barrio_sol, !is.na(NumDormitorios) & !is.na(MetrosCuadrados))
# Aquí puedes añadir más condiciones para tratar valores atípicos si es necesario

# Crear histograma para NumDormitorios
ggplot(barrio_sol, aes(x = NumDormitorios)) +
  geom_histogram(bins = 10, fill = "blue", alpha = 0.7) +
  labs(title = "Distribución del Número de Dormitorios en el Barrio de Sol",
       x = "Número de Dormitorios",
       y = "Frecuencia") +
  theme_minimal()

# Crear curva de densidad para MetrosCuadrados
ggplot(barrio_sol, aes(x = MetrosCuadrados)) +
  geom_density(fill = "green", alpha = 0.7) +
  labs(title = "Distribución de Metros Cuadrados en el Barrio de Sol",
       x = "Metros Cuadrados",
       y = "Densidad") +
  theme_minimal()

```

------------------------------------------------------------------------

22. Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

Para determinar qué variable es más fiable para predecir el precio de un inmueble en el barrio de Sol, ya sea el número de habitaciones (**`NumDormitorios`**) o los metros cuadrados (**`MetrosCuadrados`**), podemos utilizar un análisis de regresión lineal. Este análisis nos permitirá evaluar la relación de cada una de estas variables con el precio del inmueble y determinar cuál de ellas tiene una mayor influencia.

### **Pasos para el Análisis de Regresión Lineal**

1.  **Preparar los Datos:**

    -   Asegúrate de que los datos estén limpios y de que hayas filtrado o tratado los valores atípicos o faltantes.

2.  **Construir Modelos de Regresión Lineal:**

    -   Construye un modelo de regresión lineal con **`NumDormitorios`** como variable predictora y **`Precio`** como variable de respuesta.

    -   Construye otro modelo con **`MetrosCuadrados`** como variable predictora y **`Precio`** como variable de respuesta.

3.  **Evaluar los Modelos:**

    -   Compara los coeficientes de determinación (R²) de ambos modelos. El modelo con un valor R² más alto será el que mejor explique la variación en el precio.

```{r}

# Cargar la librería necesaria para la regresión
library(lmtest)

# Modelo de regresión con NumDormitorios
modelo_dormitorios <- lm(Precio ~ NumDormitorios, data = barrio_sol)
summary(modelo_dormitorios)

# Modelo de regresión con MetrosCuadrados
modelo_metros <- lm(Precio ~ MetrosCuadrados, data = barrio_sol)
summary(modelo_metros)

```

------------------------------------------------------------------------

23. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

El precio del alquiler por cada metro cuadrado extra del piso, con un margen de error del 95%, debemos referirnos al modelo de regresión lineal que relaciona los **`MetrosCuadrados`** con el **`Precio`**. En particular, necesitamos examinar el coeficiente de la variable **`MetrosCuadrados`** en este modelo, así como su intervalo de confianza.

### **Cálculo del Coeficiente y su Intervalo de Confianza**

1.  **Extraer el Coeficiente:**

    -   El coeficiente de **`MetrosCuadrados`** en el modelo de regresión nos dirá cuánto cambia el precio en promedio por cada metro cuadrado adicional.

2.  **Calcular el Intervalo de Confianza del 95%:**

    -   El intervalo de confianza nos proporcionará un rango dentro del cual podemos estar razonablemente seguros de que se encuentra el verdadero valor del coeficiente.

```{r}

# Extraer el coeficiente para MetrosCuadrados
coeficiente_metros <- coef(modelo_metros)["MetrosCuadrados"]

# Calcular el intervalo de confianza del 95%
intervalo_confianza <- confint(modelo_metros, "MetrosCuadrados", level = 0.95)

# Mostrar los resultados
print(paste("Incremento en el precio por cada metro cuadrado extra:", coeficiente_metros))
print("Intervalo de confianza del 95% para el coeficiente:")
print(intervalo_confianza)
```

------------------------------------------------------------------------

24. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

```{r}
# Asumiendo que ya tienes el modelo de regresión creado
# Modelo: modelo_dormitorios <- lm(Precio ~ NumDormitorios, data = barrio_sol)

# Extraer el coeficiente para NumDormitorios
coeficiente_dormitorios <- coef(modelo_dormitorios)["NumDormitorios"]

# Calcular el intervalo de confianza del 95%
intervalo_confianza_dormitorios <- confint(modelo_dormitorios, "NumDormitorios", level = 0.95)

# Mostrar los resultados
print(paste("Incremento en el precio por cada habitación adicional:", coeficiente_dormitorios))
print("Intervalo de confianza del 95% para el coeficiente de habitaciones:")
print(intervalo_confianza_dormitorios)
```

------------------------------------------------------------------------

25. ¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}
# Asumiendo que ya tienes el DataFrame barrio_sol

# Calcular la probabilidad de un apartamento con 3 dormitorios
total_apartamentos = nrow(barrio_sol)
apartamentos_3_dormitorios = sum(barrio_sol$NumDormitorios == 3, na.rm = TRUE)
probabilidad_3_dormitorios = apartamentos_3_dormitorios / total_apartamentos

# Calcular el intervalo de confianza del 95%
prop_error_estandar <- sqrt((probabilidad_3_dormitorios * (1 - probabilidad_3_dormitorios)) / total_apartamentos)
z <- qnorm(0.975)  # Valor Z para un intervalo de confianza del 95%
intervalo_confianza <- c(probabilidad_3_dormitorios - z * prop_error_estandar, probabilidad_3_dormitorios + z * prop_error_estandar)

# Mostrar los resultados
print(paste("Probabilidad de encontrar un apartamento con 3 dormitorios en Sol:", probabilidad_3_dormitorios))
print("Intervalo de confianza del 95% para esta probabilidad:")
print(intervalo_confianza)
```

------------------------------------------------------------------------
